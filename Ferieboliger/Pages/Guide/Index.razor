@page "/guide"

@using Ferieboliger.BLL.Services;
@using Ferieboliger.DAL.Models.Enums;

@inject IRedigerbarSideService redigerbarSideService


    <BlazoredTextEditor @ref="@QuillHtml" >
        <ToolbarContent>
            <select class="ql-header">
                <option selected=""></option>
                <option value="1"></option>
                <option value="2"></option>
                <option value="3"></option>
                <option value="4"></option>
                <option value="5"></option>
            </select>
            <span class="ql-formats">
                <button class="ql-bold"></button>
                <button class="ql-italic"></button>
                <button class="ql-underline"></button>
                <button class="ql-strike"></button>
            </span>
            <span class="ql-formats">
                <select class="ql-color"></select>
                <select class="ql-background"></select>
            </span>
            <span class="ql-formats">
                <button class="ql-list" value="ordered"></button>
                <button class="ql-list" value="bullet"></button>
            </span>
            <span class="ql-formats">
                <button class="ql-link"></button>
            </span>
            <span class="ql-formats">
                <button class="ql-image"></button>
            </span>
        </ToolbarContent>
        <EditorContent>

        </EditorContent>
    </BlazoredTextEditor>

<br />
<MudButton Color="Color.Primary" Variant="Variant.Filled"
        @onclick="@(async() =>  await GetHTML())">
    Gem indhold
</MudButton>

<MudButton Color="Color.Primary" Variant="Variant.Filled"
           @onclick="@(async() =>  await Preview())">
    Preview indhold
</MudButton>

<MudButton Color="Color.Primary" Variant="Variant.Filled"
        @onclick="@(async() =>  await SetHTML())">
    Rediger indhold
</MudButton>
<br />

<MudText Typo="Typo.body2">
    @((MarkupString)QuillHTMLContent)
</MudText>



@code {

    BlazoredTextEditor QuillHtml;
    string QuillHTMLContent;

    protected override async Task OnInitializedAsync()
    {

        QuillHTMLContent = await redigerbarSideService.GetRedigerbarSideContentByType(RedigerbarSideType.Guide);
        QuillHtml.EnableEditor(false);
        StateHasChanged();

    }

    public async Task Preview()
    {
        QuillHTMLContent = await this.QuillHtml.GetHTML();
    }

    public async Task GetHTML()
    {
        QuillHTMLContent = await this.QuillHtml.GetHTML();
        await redigerbarSideService.SaveRedigerbarSideContentById(RedigerbarSideType.Guide, QuillHTMLContent);

        StateHasChanged();
    }

    public async Task SetHTML()
    {
        await QuillHtml.EnableEditor(true);
        string QuillContent = await redigerbarSideService.GetRedigerbarSideContentByType(RedigerbarSideType.Guide);

        await this.QuillHtml.LoadHTMLContent(QuillContent);
        StateHasChanged();
    }
}