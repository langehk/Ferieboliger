@using Ferieboliger.BLL.Services;
@using Ferieboliger.ViewModel;
@using Ferieboliger.DAL.Models.Enums;

@inject IFerieboligService ferieboligService;
@inject NavigationManager navigationManager;
@inject IFiloplysningerService filoplysningerService;
@inject IHelperService helperService;

<MudGrid>

    <MudItem xs="12">
        <MudPaper Elevation="0" Class="d-flex mud-width-full align-center">
            <MudSelect @bind-SelectedValues="filtreretFeriebolig.BoligType" T="FerieboligType" MultiSelection="true" Label="Hustype" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">

                @foreach (FerieboligType type in (FerieboligType[])Enum.GetValues(typeof(FerieboligType)))
                {
                    <MudSelectItem T="FerieboligType" Value="@type"></MudSelectItem>
                }
            </MudSelect>

            <MudSelect @bind-SelectedValues="filtreretFeriebolig.Byer" MultiSelection="true" T="string" Label="Område" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                @foreach (var item in sorteredeByer)
                {
                    <MudSelectItem T="string" Value="@item" />
                }
            </MudSelect>

            <MudDateRangePicker @ref="_picker" Variant="Variant.Outlined" Label="Periode" @bind-DateRange="_dateRange" />

            <MudCardActions>
                <MudButton OnClick="applyFiltering" Variant="Variant.Filled" Color="Color.Primary">Anvend filtrering</MudButton>

                <MudButton OnClick="removeFiltering" Variant="Variant.Filled" Color="Color.Secondary">Nulstil filtrering</MudButton>
            </MudCardActions>
        </MudPaper>
    </MudItem>

    @if (filtreret)
    {
        @foreach (var feriebolig in filteredFerieboliger)
        {
            <MudItem @onclick="@(async() => await NavigateFeriebolig(feriebolig))" xs="3">
                <MudPaper Elevation="1">
                    @if (feriebolig.Filer != null)
                    {
                        List<string> _source = new List<string>();
                        @foreach (var image in feriebolig.Filer)
                        {
                            _source.Add(helperService.convertImageToDisplay(image.Data));
                        }

                        if (_source.Count() > 0)
                        {
                            <MudCarousel @ref="_carousel" ItemsSource="@_source" Style="height:25rem; " ShowArrows="@_arrows" ShowDelimiters="@_delimiters" AutoCycle="@_autocycle">
                                <ItemTemplate>
                                    <div class="d-flex flex-column flex-column justify-center feriebolig__billeder" style="height:100%; background-image: url(@context)">
                                    </div>
                                </ItemTemplate>
                            </MudCarousel>
                        }

                    }

                    @feriebolig.Adresse.Vej
                </MudPaper>
            </MudItem>
        }
    }
    else
    {
        @foreach (var feriebolig in alleFerieboliger)
        {
            <MudItem @onclick="@(async() => await NavigateFeriebolig(feriebolig))" xs="3">
                <MudPaper Elevation="1">
                    @if (feriebolig.Filer != null)
                    {
                        List<string> _source = new List<string>();
                        @foreach (var image in feriebolig.Filer)
                        {
                            _source.Add(helperService.convertImageToDisplay(image.Data));
                        }

                        if (_source.Count() > 0)
                        {
                            <MudCarousel @ref="_carousel" ItemsSource="@_source" Style="height:25rem; " ShowArrows="@_arrows" ShowDelimiters="@_delimiters" AutoCycle="@_autocycle">
                                <ItemTemplate>
                                    <div class="d-flex flex-column flex-column justify-center feriebolig__billeder" style="height:100%; background-image: url(@context)">
                                    </div>
                                </ItemTemplate>
                            </MudCarousel>
                        }

                    }

                    @feriebolig.Adresse.Vej
                </MudPaper>
            </MudItem>
        }
    }

</MudGrid>

@code {
    List<Feriebolig> alleFerieboliger = new List<Feriebolig>();
    List<Feriebolig> filteredFerieboliger = new List<Feriebolig>();

    List<string> sorteredeByer = new List<string>();


    MudDateRangePicker _picker;
    DateRange _dateRange = new DateRange();

    public FiltreretFeriebolig filtreretFeriebolig = new FiltreretFeriebolig();
    private List<Ferieboliger.DAL.Models.Booking> nuvaerendeBookinger = new List<Ferieboliger.DAL.Models.Booking>();

    public bool filtreret = false;


    private MudCarousel<string> _carousel;
    private bool _arrows = true;
    private bool _delimiters = true;
    private bool _autocycle = false;

    protected override async Task OnInitializedAsync()
    {
        alleFerieboliger = await ferieboligService.GetFerieboligerAsync();

        sorteredeByer = alleFerieboliger.Select(x => x.Adresse.By).Distinct().ToList();
    }

    public async Task NavigateFeriebolig(Feriebolig feriebolig)
    {
        navigationManager.NavigateTo("/ferieboliger/" + feriebolig.Id, false);
    }



    private void applyFiltering()
    {
        filteredFerieboliger.Clear();
        filtreret = !filtreret;

        //Dato
        if (_dateRange.Start != null && _dateRange.End != null)
        {
            filtreretFeriebolig.StartDato = _dateRange.Start;
            filtreretFeriebolig.SlutDato = _dateRange.End;

            //nuvaerendeBookinger = alleFerieboliger.SelectMany(x => x.Bookinger).Where(booking => filtreretFeriebolig.StartDato >= booking.AfrejseDato && filtreretFeriebolig.SlutDato <= booking.UdlejDato).ToList();
            //nuvaerendeBookinger = alleFerieboliger.SelectMany(x => x.Bookinger).Where(booking => filtreretFeriebolig.StartDato <= booking.UdlejDato && filtreretFeriebolig.SlutDato >= booking.AfrejseDato).ToList();
            //nuvaerendeBookinger = alleFerieboliger.SelectMany(x => x.Bookinger).Where(booking => filtreretFeriebolig.StartDato >= booking.AfrejseDato && filtreretFeriebolig.SlutDato >= booking.UdlejDato).ToList();
            nuvaerendeBookinger = alleFerieboliger.SelectMany(x => x.Bookinger).Where(booking => booking.AfrejseDato <= filtreretFeriebolig.StartDato).ToList();

            //Jeg søger på 21/11 - 28/11
            //Hvis en bolig er ledig, skal folk være rejst d. 28/11 eller tidligere
            //--> så Afrejsedato skal være ligmed eller mindre end min StartDato


            //Ønsket startdato skal være større end eller lig med Afrejsedato 

            filteredFerieboliger = nuvaerendeBookinger.Select(x => x.Feriebolig).Distinct().ToList();

            //TODO 

        }

        // Type
        if (filtreretFeriebolig.BoligType != null && filtreretFeriebolig.BoligType.Count() != 0)
        {
            FerieboligType[] arr = filtreretFeriebolig.BoligType.ToArray();

            filteredFerieboliger = alleFerieboliger.Where(x => arr.ToList().Contains(x.Type)).ToList();
        }

        // Område / by
        if (filtreretFeriebolig.Byer != null && filtreretFeriebolig.Byer.Count() != 0)
        {
            string[] byer = filtreretFeriebolig.Byer.ToArray();
            filteredFerieboliger = alleFerieboliger.Where(x => byer.Contains(x.Adresse.By)).ToList();
        }

    }

    private void removeFiltering()
    {

    }


}
