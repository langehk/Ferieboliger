@page "/ferieboliger/{Id:int}"

@using Ferieboliger.BLL.Services;
@using Ferieboliger.Pages.Feriebolig.EditModuler;
@using Ferieboliger.Pages.Feriebolig.Booking;
@using System.Globalization;
@using BlazorInputFile;
@using System.IO;
@using System;
@using Ferieboliger.DAL.Models.Enums;

@inject ISnackbar Snackbar
@inject IFerieboligService ferieboligService;
@inject IFacilitetService facilitetService;
@inject IFiloplysningerService filoplysningerService;
@inject IHelperService helperService;

<MudPaper Width="100%" Elevation="0" Class="d-flex">
    <MudContainer MaxWidth="MaxWidth.ExtraExtraLarge">
        <MudPaper Elevation="0">
            <MudText>
                <h3>@feriebolig.Adresse.By hus nr. @feriebolig.Id</h3>
                <p>
                    @feriebolig.Adresse.Vej, @feriebolig.Adresse.Postnummer @feriebolig.Adresse.By<br />
                    @feriebolig.Adresse.Land
                </p>
            </MudText>

            @if (_source.Count() > 0)
            {
                <MudCarousel PreviousIcon="" Class="feriebolig__karrusel" @ref="_carousel" ItemsSource="@_source" Style="height: 35rem;" ShowArrows="@_arrows" ShowDelimiters="@_delimiters" AutoCycle="@_autocycle">
                    <ItemTemplate>
                        <div class="d-flex flex-column flex-column justify-center feriebolig__billeder" style="height:100%; background-image:url(@context)">

                        </div>
                    </ItemTemplate>
                </MudCarousel>
            }

            <br />
            <Microsoft.AspNetCore.Components.Forms.InputFile id="uploadFiles" hidden multiple OnChange="HandleFileSelected" accept=".jpg, .jpeg, .png">

            </Microsoft.AspNetCore.Components.Forms.InputFile>

            @if (uploadImageFiltype)
            {
                <MudText Typo="Typo.body2" Color="Color.Error">@fejlbesked</MudText>
            }

            <MudButton HtmlTag="label"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Filled.CloudUpload"
                       for="uploadFiles">
                Vælg billeder
            </MudButton>

            @if (uploadImage)
            {
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="UploadImages">Upload</MudButton>
            }

            @if (files != null)
            {
                <MudText Typo="@Typo.h6">@files.Count() File@(files.Count() == 1 ? "" : "s"):</MudText>
                <MudList>
                    @foreach (var file in files)
                    {
                        <MudListItem Icon="@Icons.Filled.AttachFile" @key="@file">
                            @file.Name <code>@file.Size bytes</code>
                        </MudListItem>
                    }
                </MudList>
            }

            @if (!uploadImage && _source.Count() > 0)
            {
                <MudButton Class="ma-2" Variant="Variant.Filled" Color="Color.Error" OnClick="@(async () => await DeleteImageAsync(_carousel.SelectedIndex))">Slet</MudButton>
            }


            <MudCard Elevation="0" Class="d-flex feriebolig__highlights">
                <EditHighlights Overskrift="Highlights" Model="@feriebolig"></EditHighlights>
            </MudCard>

            <MudCard Elevation="0" Class="feriebolig__rediger">
                <EditTextfields Model="@feriebolig" Overskrift="Beskrivelse" Property="@feriebolig.Beskrivelse" PropertyName="Beskrivelse"></EditTextfields>
            </MudCard>
            <MudCard Elevation="0" Class="feriebolig__rediger">
                <EditTextfields Model="@feriebolig" Overskrift="Bemærkninger" Property="@feriebolig.Bemaerkninger" PropertyName="Bemaerkninger"></EditTextfields>

            </MudCard>

            <MudCard Elevation="0">
                <EditDropdownMultiselect AlleFaciliteter="@alleFaciliteter" Model="@feriebolig" Overskrift="Faciliteter"></EditDropdownMultiselect>
            </MudCard>

        </MudPaper>
    </MudContainer>

    <MudContainer MaxWidth="MaxWidth.Small">

        <EditPriser Overskrift="Priser" Model="@feriebolig"></EditPriser>
        <!--TODO: lav lodtrækning og booking? måske kun booking??-->

        <MudCard Elevation="0">
            <BookingFeriebolig Model="@feriebolig"></BookingFeriebolig>
        </MudCard>

        <MudCard Elevation="0">
            <p class="feriebolig__overskrift">Bookinger</p>
            @foreach (var booking in feriebolig.Bookinger)
            {
                <p>@booking.Id: @booking.UdlejDato.ToString("dddd", inf) @booking.UdlejDato.ToShortDateString() - @booking.UdlejDato.ToString("dddd", inf) @booking.AfrejseDato.ToShortDateString()</p>
            }
        </MudCard>

        <MudCard Elevation="0">
            <EditNoegler Model="feriebolig"></EditNoegler>
        </MudCard>
        <MudCard Elevation="0">
            <p class="feriebolig__overskrift">Pdf filer</p>
            <MudCard Elevation="0" Class="d-flex flex-column">
                @foreach (var item in _sourceDocuments)
                {
                <MudCard Elevation="0" Class="d-flex justify-space-between align-center">

                    <a target="_blank" href="@item.Url">
                        <MudIcon Icon="@Icons.Material.Filled.PictureAsPdf" Title="Favorite" />
                        @item.Name
                    </a>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(async () => await DeletePdfAsync(item))"> </MudIconButton>
                </MudCard>
                }
            </MudCard>

            <Microsoft.AspNetCore.Components.Forms.InputFile id="uploadpdf" hidden multiple OnChange="HandlePdfSelected" accept=".pdf">

            </Microsoft.AspNetCore.Components.Forms.InputFile>


            @if (uploadPdfFiltype)
            {
                <MudText Typo="Typo.body2" Color="Color.Error">@fejlbeskedPdf</MudText>
            }

            <MudButton HtmlTag="label"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Filled.CloudUpload"
                       for="uploadpdf">
                Vælg pdf
            </MudButton>

            @if (uploadPdf)
            {

                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="UploadDocumentsAsync">Upload pdf</MudButton>
            }

            @if (pdfFiles != null)
            {
                <MudText Typo="@Typo.h6">@pdfFiles.Count() File@(pdfFiles.Count() == 1 ? "" : "s"):</MudText>
                <MudList>
                    @foreach (var file in pdfFiles)
                    {
                        <MudListItem Icon="@Icons.Filled.AttachFile" @key="@file">
                            @file.Name <code>@file.Size bytes</code>
                        </MudListItem>
                    }
                </MudList>
            }

        </MudCard>
</MudContainer>
</MudPaper>

@code {
    [Parameter]
    public int Id { get; set; }

    IList<IBrowserFile> files = new List<IBrowserFile>();
    private IList<string> _source = new List<string>();
    private bool uploadImage = false;
    private bool uploadImageFiltype = false;
    private string fejlbesked;

    Feriebolig feriebolig = new Feriebolig();
    List<Facilitet> faciliteter = new List<Facilitet>();

    public List<byte[]> ImageUploads = new List<byte[]>();
    public List<PdfFileInformation> DocumentUploads = new List<PdfFileInformation>();


    public List<Facilitet> alleFaciliteter = new List<Facilitet>();
    public readonly string[] FILTYPER = new[] { "image/jpg", "image/jpeg", "image/png" };
    CultureInfo inf = new CultureInfo("da-DK");
    private MudCarousel<string> _carousel = new MudCarousel<string>();

    private bool _arrows = true;
    private bool _delimiters = true;
    private bool _autocycle = false;

    private string fejlbeskedPdf;
    private bool uploadPdf = false;
    private bool uploadPdfFiltype = false;
    IList<IBrowserFile> pdfFiles = new List<IBrowserFile>();
    private IList<PdfDocument> _sourceDocuments = new List<PdfDocument>();


    protected override async Task OnInitializedAsync()
    {
        alleFaciliteter = await facilitetService.GetFacilitiesAsync();
        feriebolig = await ferieboligService.GetFerieboligByIdAsync(Id);
        faciliteter = feriebolig.Faciliteter.ToList();

        @foreach (var file in feriebolig.Filer)
            {
                if (file.Type == FiloplysningType.Image)
                {
                    _source.Add(helperService.convertImageToDisplay(file.Data));
                }
                else if (file.Type == FiloplysningType.Document)
                {
                    PdfDocument pdfDocument = new PdfDocument() { Id = file.Id, Name = file.Name, Url = $"/api/File/{file.Id}"};

                    _sourceDocuments.Add(pdfDocument);
                }
            }

        if (_carousel.Items.Count() > 0)
        {
            _carousel.MoveTo(0);
        }
    }


    private async Task HandlePdfSelected(InputFileChangeEventArgs e)
    {
        uploadPdf = true;
        uploadPdfFiltype = false;
        pdfFiles.Clear();
        DocumentUploads.Clear();
        foreach (var item in e.GetMultipleFiles())
        {
            if (item.ContentType == "application/pdf")
            {
                try
                {
                    var ms = new MemoryStream();
                    await item.OpenReadStream(5242880).CopyToAsync(ms);

                    PdfFileInformation pdfFile = new PdfFileInformation() { Bytes = ms.ToArray(), Name = item.Name };

                    DocumentUploads.Add(pdfFile);
                    pdfFiles.Add(item);
                }
                catch (Exception ex)
                {
                    uploadPdfFiltype = true;
                    fejlbeskedPdf = "Filen må maks fylde 5 MB";
                    uploadPdf = false;
                    throw new Exception(ex.Message);
                }
            }
            else
            {
                uploadPdfFiltype = true;
                uploadPdf = false;
                fejlbeskedPdf = "Filtype ikke understøttet. Understøttede filtyper: .pdf";
                throw new InvalidDataException();
            }
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        uploadImage = true;
        uploadImageFiltype = false;
        ImageUploads.Clear();
        files.Clear();

        foreach (var item in e.GetMultipleFiles())
        {
            if (FILTYPER.Contains(item.ContentType))
            {
                try
                {
                    var ms = new MemoryStream();
                    await item.OpenReadStream(5242880).CopyToAsync(ms);
                    ImageUploads.Add(ms.ToArray());
                    files.Add(item);
                }
                catch (Exception ex)
                {
                    uploadImageFiltype = true;
                    uploadImage = false;
                    fejlbesked = "Filen må maks fylde 5 MB";
                    throw new Exception(ex.Message);
                }

            }
            else
            {
                uploadImage = false;
                uploadImageFiltype = true;
                fejlbesked = "Filtype ikke understøttet. Understøttede filtyper: .jpg, .jpeg og .png";
            }
        }
    }

    private async Task UploadImages()
    {
        foreach (var imgUpload in ImageUploads)
        {
            //Upload til database
            Filoplysning filoplysning = new Filoplysning();
            filoplysning.Data = imgUpload;
            filoplysning.Name = Path.GetRandomFileName();
            filoplysning.FerieboligId = feriebolig.Id;
            await filoplysningerService.UploadFile(filoplysning);

            //Tilføj til vores karrusel
            _source.Add(helperService.convertImageToDisplay(filoplysning.Data));
            await Task.Delay(1);
            if(_carousel.Items.Count() > 0)
            {
                _carousel.MoveTo(_source.Count - 1);
            }
        }
        uploadImage = false;
        ImageUploads.Clear();
        files.Clear();
    }

    private async Task UploadDocumentsAsync()
    {
        foreach (var document in DocumentUploads)
        {
            Filoplysning filoplysning = new Filoplysning();
            filoplysning.Data = document.Bytes;
            filoplysning.Name = document.Name;
            filoplysning.FerieboligId = feriebolig.Id;
            filoplysning.Type = FiloplysningType.Document;
            await filoplysningerService.UploadFile(filoplysning);

            PdfDocument pdfDoc = new PdfDocument() { Name = filoplysning.Name, Url = $"/api/File/{filoplysning.Id}" };
            _sourceDocuments.Add(pdfDoc);
        }
        uploadPdf = false;
        DocumentUploads.Clear();
        pdfFiles.Clear();
    }

    private async Task DeleteImageAsync(int index)
    {
        if (_source.Any())
        {
            List<Filoplysning>
            filoplysninger = new List<Filoplysning>();
            filoplysninger = feriebolig.Filer.Where(x => x.Type == FiloplysningType.Image).ToList();
            _source.RemoveAt(index);
            await Task.Delay(1);
            _carousel.MoveTo(System.Math.Max(System.Math.Min(index, _source.Count - 1), 0));
            await filoplysningerService.DeleteImageByIdAsync(filoplysninger.ElementAt(index).Id);

        }
    }

    private async Task DeletePdfAsync(PdfDocument pdfDocument)
    {
        if (_sourceDocuments.Any())
        {
            _sourceDocuments.Remove(pdfDocument);

            await filoplysningerService.DeletePdfDocumentByIdAsync(pdfDocument.Id);
        }
    }

    }
