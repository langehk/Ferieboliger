@inject Ferieboliger.BLL.Services.IBookingService bookingService
@using Ferieboliger.DAL.Models.Enums;
<p class="feriebolig__overskrift">Book ferieboligen</p>

<MudDateRangePicker @ref="_picker" Label="With action buttons" ShowWeekNumbers="true" @bind-DateRange="_dateRange" >

    <PickerActions>

        <MudButton OnClick="BookFeriebolig" Color="Color.Primary">Book</MudButton>
        <MudButton OnClick="@(() => _picker.Close(false))">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="@(() => _picker.Close())">Ok</MudButton>
    </PickerActions>
</MudDateRangePicker>

@_dateRange.Start.Value
@_dateRange.End.Value


@code {

    [Parameter]
    public Feriebolig Model { get; set; }

    MudDateRangePicker _picker;
    public DateRange _dateRange = new DateRange(DateTime.Now.Date, DateTime.Now.AddDays(7).Date);

    public List<Booking> currentReservations = new List<Booking>();

    protected override async Task OnInitializedAsync()
    {

    }

    private bool checkDate(DateTime input)
    {
        currentReservations = Model.Bookinger.ToList();

        // Her checker vi om datoen er Lørdag, og sikrer at der ikke findes tidligere bookinger.
        if (input.Date.DayOfWeek == DayOfWeek.Saturday && !currentReservations.Any(x => x.UdlejDato <= input && x.AfrejseDato > input))
        {
            return false;
        }
        else
        {
            return true;
        }
    }


    private async Task BookFeriebolig()
    {
        _picker.Close();

        Booking booking = new Booking()
        {
            Pris = Model.PrisHoej,
            PointPris = BookingPointPris.HoejSaeson,
            UdlejDato = _picker.DateRange.Start.Value,
            AfrejseDato = _picker.DateRange.End.Value,
            FerieboligId = Model.Id,
            BrugerId = 1,
        };

        await bookingService.CreateBookingAsync(booking);



        // TODO - Metode til at finde den nuværende bruger...

        // HVis "Dummy" bruger, skal der ikke findes en bruger.

    }
}
